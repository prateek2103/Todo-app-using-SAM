AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: todo-app

Globals:
  Function:
    Timeout: 3
    MemorySize: 128
    Runtime: python3.9
    Handler: app.lambda_handler

Resources:
  AlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "delete-queue-alarm-notification"
      TopicName: delete-queue-alarm-topic
      Subscription:
        - Protocol: "lambda"
          Endpoint: !GetAtt DeleteTodoFunction.Arn

  QueueDepthAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if queue depth increases to more than 10 messages"
      Namespace: "AWS/SQS"
      MetricName: "ApproximateNumberOfMessagesVisible"
      Dimensions:
        - Name: "QueueName"
          Value: !GetAtt DeleteQueue.QueueName
      Statistic: "Sum"
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "10"
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - Ref: "AlarmTopic"
      InsufficientDataActions:
        - Ref: "AlarmTopic"

  DeleteQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "delete-todo-queue"

  QueueParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "/todolist/deletequeue/url"
      Type: String
      Value: !Ref DeleteQueue
      Description: SSM Parameter for the url of the todo list delete queue

  ArchiveBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "todo-list-archive-bucket"

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: TodoListApi
      Description: API Gateway for the Todo List Application
      StageName: Prod
      TracingEnabled: true
      MethodSettings:
        - DataTraceEnabled: true
          MetricsEnabled: true
          # LoggingLevel: "INFO"
          HttpMethod: "*"
          ResourcePath: "/*"

  DynamoDBDatabase:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "item_id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "item_id"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST
      TableName: Todos

  CreateTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/create_todo/
      Policies:
        - Statement:
            - Sid: CreatePolicy
              Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Todos
      Events:
        CreateTodo:
          Type: Api
          Properties:
            Path: /todo-list/create
            Method: post
            RestApiId: !Ref ApiGateway

  UpdateTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/update_todo/
      Policies:
        - Statement:
            - Sid: UpdatePolicy
              Effect: Allow
              Action:
                - dynamodb:UpdateItem
              Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Todos
      Events:
        UpdateTodo:
          Type: Api
          Properties:
            Path: /todo-list/update
            Method: post
            RestApiId: !Ref ApiGateway

  ListTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/list_todos/
      Policies:
        - Statement:
            - Sid: ListPolicy
              Effect: Allow
              Action:
                - dynamodb:Scan
              Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Todos
      Events:
        GetTodos:
          Type: Api
          Properties:
            Path: /todo-list/list-todos
            Method: get
            RestApiId: !Ref ApiGateway

  GetTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/get_todo/
      Policies:
        - Statement:
            - Sid: GetPolicy
              Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Todos
      Events:
        GetTodos:
          Type: Api
          Properties:
            Path: /todo-list/{item_id}
            Method: get
            RestApiId: !Ref ApiGateway

  ArchiveTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/archive_todo/
      Policies:
        - Statement:
            - Sid: GetAndUpdateDbPolicy
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:UpdateItem
              Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Todos

            - Sid: ArchivePolicy
              Effect: Allow
              Action:
                - s3:PutObject
              Resource: arn:aws:s3:::todo-list-archive-bucket/*

      Events:
        GetTodos:
          Type: Api
          Properties:
            Path: /todo-list/archive/{item_id}
            Method: get
            RestApiId: !Ref ApiGateway

  ListArchiveTodosFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/list_archive/
      Policies:
        - Statement:
            - Sid: GetPolicy
              Effect: Allow
              Action:
                - s3:ListBucket
              Resource: arn:aws:s3:::todo-list-archive-bucket/*
      Events:
        GetTodos:
          Type: Api
          Properties:
            Path: /todo-list/list-archives
            Method: get
            RestApiId: !Ref ApiGateway

  CompleteTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/complete_todo/
      Policies:
        - Statement:
            - Sid: CompleteTodoPolicy
              Effect: Allow
              Action:
                - dynamodb:UpdateItem
              Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Todos
      Events:
        GetTodos:
          Type: Api
          Properties:
            Path: /todo-list/complete/{item_id}
            Method: get
            RestApiId: !Ref ApiGateway

  MarkDeleteTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/mark_delete_todo/
      Policies:
        - Statement:
            - Sid: TodoQueueAccessPolicy
              Effect: Allow
              Action:
                - sqs:SendMessage
              Resource: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:delete-todo-queue

            - Sid: TodoSSMPolicy
              Effect: Allow
              Action:
                - ssm:GetParameter
              Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/todolist/deletequeue/url
      Events:
        GetTodos:
          Type: Api
          Properties:
            Path: /todo-list/delete/{item_id}
            Method: get
            RestApiId: !Ref ApiGateway

  DeleteTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/delete_todo/
      Policies:
        - Statement:
            - Sid: TodoQueueAccessPolicy
              Effect: Allow
              Action:
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
              Resource: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:delete-todo-queue

            - Sid: TodoSSMPolicy
              Effect: Allow
              Action:
                - ssm:GetParameter
              Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/todolist/deletequeue/url

            - Sid: UpdatePolicy
              Effect: Allow
              Action:
                - dynamodb:UpdateItem
              Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Todos

Outputs:
  CreateTodoApi:
    Description: "API Gateway endpoint URL for Create Todo function"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/todo-list/create"
  ListTodosApi:
    Description: "API Gateway endpoint URL for List Todos function"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/todo-list/list-todos"
  UpdateTodoApi:
    Description: "API Gateway endpoint URL for Update Todo function"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/todo-list/update"
  CompleteTodoApi:
    Description: "API Gateway endpoint URL for Complete Todo function"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/todo-list/complete/{item_id}"
  MarkDeleteTodoApi:
    Description: "API Gateway endpoint URL for Mark Delete Todo function"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/todo-list/delete/{item_id}"
  ArchiveTodoApi:
    Description: "API Gateway endpoint URL for Archive Todo function"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/todo-list/archive/{item_id}"
  ListArchiveTodoApi:
    Description: "API Gateway endpoint URL for List archives Todo function"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/todo-list/list-archives"
  DeleteQueueURL:
    Description: "The queue url of the delete queue"
    Value: !Ref DeleteQueue
